openapi: 3.0.2

# TODO: add security schemes, auth scopes

#servers:
#  - description: SwaggerHub API Auto Mocking
#    url: https://virtserver.swaggerhub.com/Raghav-intrigue/PicturePerfect/0.0.1

info:
  title: Picture Perfect
  description: >-
    Sample API description. You can find more at
    [https://clumio.com](https://clumio.com/).
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: 1raghavmahajan@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 0.0.1
tags:
  - name: Movie
    description: >-
      This service is to retrieve and maintain the catalogue of movies,
      documentaries and television programs.
  - name: IAM
    description: >-
      Identity and Access management - this is to authenticate a user, and
      identify if the user is general user or somebody who can manage the
      PicturePerfect operations based on a role and privilege
  - name: Review
    description: >-
      This service lets users add, update or delete an existing rating/review
      for a movie
  - name: Show
    description: >-
      This service lists the cineplexes where the movie is being screened in a
      given city
  - name: Admin
    description: The services that require admin privileges

paths:

  #region Movies

  /movies/catalogue:
    get:
      tags:
        - Movie
      summary: 'Get a paginated list of movies, along with the associated media'
      operationId: getMovieCatalogue
      parameters:
        - name: q
          in: query
          description: Search query
          required: true
          allowEmptyValue: true
          style: form
          explode: true
          schema:
            type: string
        - name: limit
          in: query
          description: limits query results (default size 20)
          required: false
          schema:
            type: integer
            minimum: 20
            maximum: 75
        - name: offset
          in: query
          description: paginates query results
          required: false
          schema:
            type: integer
            minimum: 0
        - name: filterOptions
          in: query
          description: filter by category/genre/language
          required: false
          allowEmptyValue: true
          schema:
            type: object
            properties:
              cat:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
              gen:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
              lang:
                type: array
                items:
                  $ref: '#/components/schemas/Language'
        - name: sort
          in: query
          description: sort by name/rating
          required: false
          schema:
            type: string
            enum:
              - ASC_byName
              - DESC_byName
              - ASC_byRating
              - DESC_byRating
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieLite'
    post:
      tags:
        - Movie
        - Admin
      summary: Add a movie to the catalogue
      operationId: addMovieToCatalogue
      requestBody:
        description: Movie object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/Ok200'
    delete:
      summary: Delete movies from catalogue
      tags:
        - Movie
        - Admin
      description: deletes the list of movies
      operationId: deleteMoviesByID
      parameters:
        - name: movieIDs
          in: query
          description: IDs of movies that need to be deleted
          required: true
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        '200':
          $ref: '#/components/responses/Ok200'
  '/movies/catalogue/{movieID}':
    parameters:
      - in: path
        name: movieID
        schema:
          type: integer
          format: int64
        required: true
        description: The movie ID
    get:
      description: Get movie details
      tags:
        - Movie
      operationId: getMovieDetails
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
    post:
      summary: Set full movie details 
      tags:
        - Movie
        - Admin
      description: Replaces entire movie object
      operationId: setMovieDetails
      requestBody:
        description: movie object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        '200':
          $ref: '#/components/responses/Ok200'
    patch:
      summary: Update movie details
      tags:
        - Movie
        - Admin
      description: Update movie catalogue attribute
      operationId: updateMovieDetails
      requestBody:
        description: Movie Attributes that need to be updated
        required: true
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        '200':
          description: OK
    delete:
      summary: Delete movie from catalogue
      tags:
        - Movie
        - Admin
      description: deletes the movie
      operationId: deleteMovie
      responses:
        '200':
          $ref: '#/components/responses/Ok200'
  '/movies/catalogue/{movieID}/uploadImage':
    post:
      tags:
        - Movie
        - Admin
      summary: upload an image related to the movie
      operationId: uploadMediaToMovie
      parameters:
        - name: movieID
          in: path
          description: ID of movie to update
          required: true
          schema:
            type: integer
            format: int64
        - name: setAsThumbnail
          in: query
          description: sets the image as thumbnail if true
          schema:
            type: boolean
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        '200':
          $ref: '#/components/responses/Ok200'
  /movies/topMoviesByCategory:
    get:
      tags:
        - Movie
      summary: Get a list of top/featured movies
      operationId: getTopMoviesByCategory
      parameters:
        - name: limit
          in: query
          description: limits query results (default size 20)
          schema:
            type: integer
            minimum: 20
            maximum: 50
        - name: offset
          in: query
          description: paginates query results
          schema:
            type: integer
            minimum: 0
        - name: category
          in: query
          description: reqested category
          required: true
          allowEmptyValue: true
          schema:
            $ref: '#/components/schemas/TopCategories'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieLite'
    post:
      tags:
        - Movie
        - Admin
      summary: Set the list of featured movies
      operationId: setFeaturedByCategory
      parameters:
        - name: category
          in: query
          description: category to be updated
          required: true
          allowEmptyValue: true
          schema:
            $ref: '#/components/schemas/TopCategories'
      requestBody:
        description: list of MovieIDs to be featured
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int64
        required: true
      responses:
        '200':
          $ref: '#/components/responses/Ok200'
    put:
      tags:
        - Movie
        - Admin
      summary: Add movies to the list of featured movies
      operationId: addFeaturedToCategory
      parameters:
        - name: category
          in: query
          description: category to be updated
          required: true
          allowEmptyValue: true
          schema:
            $ref: '#/components/schemas/TopCategories'
      requestBody:
        description: list of MovieIDs to be added
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int64
        required: true
      responses:
        '200':
          $ref: '#/components/responses/Ok200'
    delete:
      tags:
        - Movie
        - Admin
      summary: Delete movies from the list of featured movies
      operationId: deleteFeaturedByCategory
      parameters:
        - name: category
          in: query
          description: category to be updated
          required: true
          allowEmptyValue: true
          schema:
            $ref: '#/components/schemas/TopCategories'
        - name: movieIDs
          in: query
          description: IDs of movies that need to be deleted
          required: true
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        '200':
          $ref: '#/components/responses/Ok200'

  #endregion
  
  #region IAM

  /user:
    get:
      tags:
        - IAM
        - Admin
      summary: Gets the list of users
      description: This can only be done by the administrator.
      operationId: getAllUsers
      parameters:
        - name: q
          in: query
          description: Search for a specific user by userID/phone number
          schema:
            type: string
        - name: limit
          in: query
          description: limits query results (default size 50)
          schema:
            type: integer
            minimum: 20
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: paginates query results
          schema:
            type: integer
            minimum: 0
        - name: sort
          in: query
          description: sort by name
          schema:
            type: string
            enum:
              - ASC_byName
              - DESC_byName
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieLite'
    post:
      tags:
        - IAM
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: OK
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest400'
        '429':
          $ref: '#/components/responses/RateLimited429'
  /user/login:
    get:
      tags:
        - IAM
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: userID
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          content: {}
        '429':
          $ref: '#/components/responses/RateLimited429'
  /user/logout:
    get:
      tags:
        - IAM
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  '/user/{userID}':
    parameters:
      - in: path
        name: userID
        schema:
          type: integer
          format: int64
        required: true
        description: The user ID
    get:
      tags:
        - IAM
      summary: Get user by user name
      operationId: getUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '404':
          $ref: '#/components/responses/NotFound404'
    put:
      tags:
        - IAM
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '400':
          $ref: '#/components/responses/BadRequest400'
        '404':
          $ref: '#/components/responses/NotFound404'
    delete:
      tags:
        - IAM
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      responses:
        '400':
          $ref: '#/components/responses/BadRequest400'
        '404':
          $ref: '#/components/responses/NotFound404'
  
  #endregion

components:
  schemas:

    UserLite:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        emailId:
          type: string
          format: email
        ifVerified:
          type: boolean
          default: false
        phone_no:
          type: string
        role:
          type: integer
        region:
          $ref: '#/components/schemas/Region'
        billingAddress:
          $ref: '#/components/schemas/Address'
    User:
      allOf:
        - $ref: '#/components/schemas/MovieLite'
        - type: object
          properties:
            reviews:
              type: array
              items:
                $ref: '#/components/schemas/Review'
            profile_pic:
              type: string
              format: uri
    Review:
      type: object
      properties:
        id:
          type: integer
          format: int64
        rating:
          type: integer
          minimum: 1
          maximum: 5
        author:
          $ref: '#/components/schemas/User'
        movie:
          $ref: '#/components/schemas/Movie'
    MovieLite:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        language:
          $ref: '#/components/schemas/Language'
        status:
          $ref: '#/components/schemas/MovieStatus'
        releaseData:
          type: string
          format: date
        genre:
          $ref: '#/components/schemas/Genre'
        duration:
          type: integer
          format: int32
        thumbnail:
          type: string
          format: uri
        certificate:
          $ref: '#/components/schemas/Certificate'
        category:
          $ref: '#/components/schemas/Category'
    Movie:
      allOf:
        - $ref: '#/components/schemas/MovieLite'
        - type: object
          properties:
            media:
              type: array
              items:
                type: string
                format: uri
            synopsis:
              type: string
            writtenBy:
              type: string
            directedBy:
              type: string
            upcomingShows:
              type: array
              items:
                $ref: '#/components/schemas/Show'
              maxItems: 5
    Cineplex:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        region:
          $ref: '#/components/schemas/Region'
        contactNo:
          type: string
        shows:
          type: array
          items:
            $ref: '#/components/schemas/Show'
    Reservation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        show:
          $ref: '#/components/schemas/Show'
        reservedStatus:
          type: boolean
          default: false
        paid:
          type: boolean
          default: false
        active:
          type: boolean
          default: false
        userId:
          type: integer
          format: int64
        seatsReserved:
          type: array
          items:
            $ref: '#/components/schemas/Seat'
        transactionDetails:
          type: object
          properties:
            paymentMethod:
              type: string
            paymentAmount:
              type: number
              format: float
    Seat:
      type: object
      properties:
        row:
          type: string
        number:
          type: integer
        auditorium:
          type: string
    Show:
      type: object
      properties:
        id:
          type: integer
          format: int64
        capacity:
          type: integer
        format:
          $ref: '#/components/schemas/Format'
        startTime:
          type: string
          format: date-time
        movie_id:
          type: integer
          format: int64
    
    Region:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        latlng:
          type: array
          items:
            type: number
            format: double
          minItems: 2
          maxItems: 2
    Address:
      type: object
      properties:
        streetAdresses:
          type: string
        pincode:
          type: integer
          format: int32
        city:
          type: string
    
    Language:
      type: string
      enum:
        - English
        - Hindi
        - Marathi
        - Punjabi
        - Tamil
        - Telugu
    Genre:
      type: string
      enum:
        - Action
        - Adventure
        - Animation
        - Comedy
        - Drama
        - Horror
        - Scifi
        - Thriller
        - Romance
    TopCategories:
      allOf:
        - $ref: '#/components/schemas/Genre'
        - type: string
          enum:
            - NowShowing
            - Upcoming
    Format:
      type: string
      enum:
        - 2D
        - 3D
        - 4DX
        - IMAX-2D
        - IMAX-3D
    Certificate:
      type: string
      enum:
        - U
        - UA
        - A
        - S
    Category:
      type: string
      enum:
        - TV-Show
        - Movie
        - Documentary
        - Short-Film
    MovieStatus:
      type: string
      enum:
        - In-Theatres
        - Off-Theatres
        - To-be-Released
    
    ResponsePlaceholder:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  
  responses:
    Modified:
      description: The specified resource was modified
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePlaceholder'
    Ok200:
      description: OK
    Created201:
      description: The requested resource was created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePlaceholder'
    BadRequest400:
      description: Invalid parameters or syntax
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePlaceholder'
    Unauthorized401:
      description: Requested operation requires authorization
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePlaceholder'
    Forbidden403:
      description: Access forbidden to requested resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePlaceholder'
    NotFound404:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePlaceholder'
    RateLimited429:
      description: Too many requests
      headers:
        X-Rate-Limit:
          description: calls per hour allowed by the user
          schema:
            type: integer
            format: int32
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePlaceholder'
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
    pp_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://domain.test/api/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
