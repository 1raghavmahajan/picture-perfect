openapi: 3.0.2
info:
  title: Picture Perfect
  description: "Sample API description. You can find more at [https://clumio.com](https://clumio.com/)."
  termsOfService: http://swagger.io/terms/
  contact:
    email: 1raghavmahajan@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1b

tags:
  - name: Catalogue
    description: This service is to retrieve and maintain the catalogue of movies, documentaries and television programs.
  - name: IAM
    description: Identity and Access management - this is to authenticate a user, and identify if the user is general user or somebody who can manage the PicturePerfect operations based on a role and privilege
  - name: Review
    description: This service lets users add, update or delete an existing rating/review for a movie
  - name: Show
    description: This service lists the cineplexes where the movie is being screened in a given city

paths:

  /movies/catalogue:    
    get:
      tags:
        - Catalogue
      summary: Get a paginated list of movies, along with the associated media (links to the thumbnail pictures)
      operationId: getMovieCatalogue
      parameters:
        - name: q
          in: query
          description: Search query
          required: true
          allowEmptyValue: true
          style: form
          explode: true
          schema:
            type: string
        - name: limit 
          in: query
          description: limits query results (default size 20)
          required: false
          schema:
            type: integer
            minimum: 20
            maximum: 75
        - name: offset
          in: query
          description: paginates query results
          required: false
          schema:
            type: integer
            minimum: 0
        - name: filterOptions
          in: query
          description: filter by category/genre/language
          required: false
          allowEmptyValue: true
          schema:
            type: object
            properties:
              cat:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
              gen:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
              lang:
                type: array
                items:
                  $ref: '#/components/schemas/Language'
        - name: sort
          in: query
          description: sort by name/rating
          required: false
          schema:
            type: string
            enum:
              - ASC_byName
              - DESC_byName
              - ASC_byRating
              - DESC_byRating

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MovieLite"
        
    post: #replaces entire object
      tags:
        - Catalogue
      summary: Add a movie to the catalogue
      operationId: addMovie
      requestBody:
        description: Movie object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Movie"
        required: true

      responses:
        200:
          $ref: '#/components/responses/Ok200'

  
  # /movies/catalogue/{id}:
  #   get: #gets that movie catalogue object
  #     tags:
        
  #   patch: #update specific attributes

  # /movies/topMoviesByCategory:
  
  # /movies/catalogue?{query}:
  
  #region IAM

  /user:
    post:
      tags:
        - IAM
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content: # TODO: auth
            application/json:
              schema:
                type: string
        400:
          $ref: "#/components/responses/BadRequest400"
        429:
          $ref: "#/components/responses/RateLimited429"
        
  /user/login:
    get:
      tags:
        - IAM
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: userID
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content: # TODO: auth
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
        429:
          $ref: "#/components/responses/RateLimited429"
  
  /user/logout:
    get:
      tags:
        - IAM
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  
  /user/{userID}:
    get:
      tags:
        - IAM
      summary: Get user by user name
      operationId: getUser
      parameters:
        - name: userID
          in: path
          description: "The userID of the user needs to be fetched"
          required: true
          schema:
            type: string

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/BadRequest400"
        404:
          $ref: "#/components/responses/NotFound404"
    
    put:
      tags:
        - IAM
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userID
          in: path
          description: userID or the user that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        400:
          $ref: "#/components/responses/BadRequest400"
        404:
          $ref: "#/components/responses/NotFound404"
      
    delete:
      tags:
        - IAM
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        400:
          $ref: "#/components/responses/BadRequest400"
        404:
          $ref: "#/components/responses/NotFound404"

  #endregion

components:
  schemas:

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        emailId:
          type: string
          format: email
        ifVerified:
          type: boolean
          default: false
        phone_no:
          type: string
        role:
          type: integer
        reviews:
          type: array
          items:
            type: review
        billingAddress:
          $ref: '#/components/schemas/Address'
        region:
          $ref: '#/components/schemas/Region'
        # TODO: Associated media

    Review:
      type: object
      properties:
        id:
          type: integer
          format: int64
        rating:
          type: integer
          minimum: 1
          maximum: 5
        author:
          $ref: '#/components/schemas/User'
        movie:
          $ref: '#/components/schemas/Movie'
    
    MovieLite:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        language:
          $ref: '#/components/schemas/Language'
        status: # manual
          $ref: '#/components/schemas/MovieStatus'
        releaseData:
          type: string
          format: date
        genre:
          $ref: '#/components/schemas/Genre'
        duration:
          type: integer
          format: int32
        thumbnail:
          type: string
          format: uri
        certificate:
          $ref: '#/components/schemas/Certificate'
        category:
          $ref: '#/components/schemas/Category'

    Movie:
      allOf:
        - $ref: '#/components/schemas/MovieLite'
        - type: object
          properties:
            media:
              type: array
              items:
                type: string
                format: uri
            synopsis:
              type: string
            writtenBy:
              type: string
            directedBy:
              type: string
            upcomingShows: # TODO: check if feasible
              type: array
              items:
                $ref: '#/components/schemas/Show'
              maxItems: 5
    
    Cineplex:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        region:
          $ref: '#/components/schemas/Region'
        contactNo:
          type: string
        shows: # Optional
          type: array
          items:
            $ref: '#/components/schemas/Show'
    
    Reservation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        show:
          $ref: '#/components/schemas/Show'
        reservedStatus:
          type: boolean
          default: false
        paid:
          type: boolean
          default: false
        active:
          type: boolean
          default: false
        userId: # TODO: optional
          type: integer
          format: int64
        seatsReserved:
          type: array
          items:
            $ref: '#/components/schemas/Seat'
        transactionDetails:
          type: object
          properties:
            paymentMethod:
              type: string
            paymentAmount:
              type: number
              format: float
    
    Seat:
      type: object
      properties:
        row:
          type: string
        number:
          type: integer
        auditorium:
          type: string
    
    Show:
      type: object
      properties:
        id:
          type: integer
          format: int64
        capacity:
          type: integer
        format:
          $ref: '#/components/schemas/Format'
        startTime:
          type: string
          format: date-time
        movie_id: # TODO: redundant
          type: integer
          format: int64
      
    Region:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        latlng:
          type: array
          items:
            type: number
            format: double
          minItems: 2
          maxItems: 2

    Address:
      type: object
      properties:
        streetAdresses:
          type: string
        pincode:
          type: integer
          format: int32
        city: # get from pincode?
          type: string
        
    Language:
      type: string
      enum:
        - English
        - Hindi
        - Marathi
        - Punjabi
        - Tamil
        - Telugu
    Genre:
      type: string
      enum:
        - Action
        - Adventure
        - Animation
        - Comedy
        - Drama
        - Horror
        - Scifi
        - Thriller
        - Romance
    Format:
      type: string
      enum:
        - 2D
        - 3D
        - 4DX
        - IMAX-2D
        - IMAX-3D
    Certificate:
      type: string
      enum:
        - U
        - UA
        - A
        - S
    Category:
      type: string
      enum:
        - TV-Show
        - Movie
        - Documentary
        - Short-Film
    MovieStatus:
      type: string
      enum:
        - In-Theatres
        - Off-Theatres
        - To-be-Released
    
    # Schema for Response content placeholder
    ResponsePlaceholder:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    
  responses:
    Modified:
      description: The specified resource was modified
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePlaceholder'
    Ok200:
      description: OK
    Created201:
      description: The requested resource was created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePlaceholder'
    BadRequest400:
      description: Invalid parameters or syntax
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePlaceholder'
    Unauthorized401:
      description: Requested operation requires authorization
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePlaceholder'
    Forbidden403:
      description: Access forbidden to requested resource 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePlaceholder'
    NotFound404:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePlaceholder'
    RateLimited429:
      description: Too many requests
      headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePlaceholder'
  
  securitySchemes:
    pp_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://domain.test/api/oauth/dialog'
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    
    api_key:
      type: apiKey
      name: api_key
      in: header

    